#!/usr/bin/env bash
# Disable immediate exit on error
# set +e

script_dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" &>/dev/null && pwd)"
platform="$(uname -s | tr '[:upper:]' '[:lower:]')"

# Initialize variables
dry_run=0
filter=""

# Parse command-line arguments.
# This supports both: ./run {prefix} --dry-run and ./run --dry-run
while [[ "$#" -gt 0 ]]; do
    case "$1" in
    --dry-run)
        dry_run=1
        ;;
    *)
        if [ -z "$filter" ]; then
            filter="$1"
        else
            echo "Unknown argument: $1"
            exit 1
        fi
        ;;
    esac
    shift
done

# Logging functions
log_info() {
    echo -e "\033[1;34m[INFO]\033[0m $1"
}
log_warn() {
    echo -e "\033[1;33m[WARN]\033[0m $1"
}

run_platform_scripts() {
    local os_dir="$script_dir/runs/$1"
    local scripts=()

    # If no filter is provided, add all 00-* scripts first
    if [ -z "$filter" ]; then
        while IFS= read -r script; do
            scripts+=("$script")
        done < <(find "$os_dir" -name "00-*" -type f | sort)
    fi

    # Then add the other scripts
    while IFS= read -r script; do
        scripts+=("$script")
    done < <(find "$os_dir" -mindepth 1 -maxdepth 1 -type f ! -name "00-*" | sort)

    # Iterate over the collected scripts
    for script in "${scripts[@]}"; do
        script_name=$(basename "$script")
        if [ -x "$script" ]; then
            if [[ -n "$filter" && ! "$script_name" =~ $filter ]]; then
                log_warn "Skipping script '$script_name' (does not match filter '$filter')"
                continue
            fi
            if [ "$dry_run" -eq 1 ]; then
                log_info "Dry-run: Would execute script: $script_name"
            else
                log_info "Executing script: $script_name"
                bash "$script" || log_warn "Script $script_name exited with nonzero status"
            fi
        fi
    done

    log_info "All scripts in $os_dir have been processed."
}

case "$platform" in
linux*) run_platform_scripts "linux" ;;
darwin*) run_platform_scripts "macos" ;;
*)
    echo "Unsupported OS"
    exit 1
    ;;
esac
