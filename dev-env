#!/usr/bin/env bash
dry_run="0"

if [ -z "$XDG_CONFIG_HOME" ]; then
    echo -e "\033[1;33m[WARN]\033[0m XDG_CONFIG_HOME not set; defaulting to ~/.config"
    XDG_CONFIG_HOME="$HOME/.config"
fi

if [ -z "$DEV_ENV" ]; then
    echo -e "\033[1;31m[ERROR]\033[0m DEV_ENV must be set"
    exit 1
fi

if [[ $1 == "--dry" ]]; then
    dry_run="1"
fi

# Improved logging function using colors
log() {
    if [[ $dry_run == "1" ]]; then
        echo -e "\033[1;36m[DRY RUN]\033[0m $1"
    else
        echo -e "\033[1;32m[INFO]\033[0m $1"
    fi
}

update_files() {
    log "Copying files from: $1"
    pushd "$1" &>/dev/null || {
        log "Failed to enter directory $1"
        return
    }
    for config in $(find . -mindepth 1 -maxdepth 1 -type d); do
        local target="${2%/}/${config#./}"
        log "Removing existing directory: rm -rf $target"
        if [[ $dry_run == "0" ]]; then
            rm -rf "$target"
        fi
        log "Copying directory: cp -r $config $2"
        if [[ $dry_run == "0" ]]; then
            cp -r "$config" "$2"
        fi
    done
    popd &>/dev/null || log "Failed to return from directory $1"
}

copy() {
    log "Removing file: $2"
    if [[ $dry_run == "0" ]]; then
        rm -f "$2"
    fi
    log "Copying file: cp $1 $2"
    if [[ $dry_run == "0" ]]; then
        cp "$1" "$2"
    fi
}

update_files "$DEV_ENV/env/.config" "$XDG_CONFIG_HOME"
update_files "$DEV_ENV/env/.local" "$HOME/.local"

copy "$DEV_ENV/tmux-sessionizer/tmux-sessionizer" "$HOME/.local/scripts/tmux-sessionizer"
copy "$DEV_ENV/env/.zprofile" "$HOME/.zprofile"
copy "$DEV_ENV/env/.zshrc" "$HOME/.zshrc"
copy "$DEV_ENV/env/.xprofile" "$HOME/.xprofile"
copy "$DEV_ENV/env/.tmux-sessionizer" "$HOME/.tmux-sessionizer"
copy "$DEV_ENV/dev-env" "$HOME/.local/scripts/dev-env"
